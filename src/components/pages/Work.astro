---
import Container from "/src/components/Container.astro";

const storyboardItems = [
  { src: "terrorinthecity.mp4", title: "Terror in the City", description: "A past inhabitant wanders the husk of her former home" },
  { src: "azurewasteland.mp4", title: "Azure Wasteland", description: "An evil figure takes her leftover sandwich, idk" }
];

const musicItems = [
  { src: "=3-ified.mp3", cover: "=3-ified.jpg", title: ":3-ified", artist: "ZurraBunny" },
  { src: "Halcyon.ogg", cover: "Halcyon.jpg", title: "Halcyon", artist: "ZurraBunny & OnlineBlanks" },
  { src: "Unholy Seranata.ogg", cover: "Unholy Seranata.png", title: "Unholy Seranata", artist: "ZurraBunny & OnlineBlanks" },
  { src: "Overwhelmed.wav", cover: "Overwhelmed.jpeg", title: "Overwhelmed", artist: "ZurraBunny" },
  { src: "Shorts and Shores.mp3", cover: "honeymoon.png", title: "Shorts and Shores", artist: "ZurraBunny & OnlineBlanks" },
  { src: "Starstruck.mp3", cover: "honeymoon.png", title: "Starstruck", artist: "ZurraBunny" },
  { src: "Libel.mp3", cover: "Libel.png", title: "Libel", artist: "ZurraBunny" },
  { src: "microArp.ogg", cover: "microArp.png", title: "microArp", artist: "ZurraBunny" },
  { src: "Sifted.wav", cover: "Sifted.png", title: "Sifted", artist: "ZurraBunny" }
];

const galleryItems = {
  Illustrations: ["1 (1).png","1.png","3.png","astrowo.png","dress.png","emmarefs.png","fluttrerbee.png","high ra and zur ha.png","lumi nun.png","luuust.png","pebbles empty.png","rf.png","shame on you.png","sigma wolf.png","TITLE CARD.png","uh.png","walk.png","zurra miles graduat.png","zuref.png","bearoth.png"],
  Animation: ["3RD EXAM_FINAL.mp4","ball.webp","disney hopefully.webp","duckass.webp","music video parts.mp4","pookiedeer.webp","RUNNINGMAN.webp","SACK ANIM_maulawin.webp","shake ma hand.mp4","slowinslowout.webp","so-much-scavs.webp","thebigfight.webp","walkin.webp"],
  "3D": ["ewwie.webp","AI.png","karmaGate_Open.webp","scavscared.webp","metropolis3.png","shelter.webp","sofanthiel3d.webp","SPOILER_drillcrabortho.webp","white-squidcada.webp","livingrender.png","worm.png","token.webp","snail.webp"]
};
---

<main class="content">
  <Container variant="static">
    <div class="tabs">
      <button data-tab="Illustrations" class="active">Illustrations</button>
      <button data-tab="Animation">Animation</button>
      <button data-tab="3D">3D</button>
      <button data-tab="Storyboard">Storyboard</button>
      <button data-tab="Music">Music</button>
    </div>

    <h1 id="tab-title">Illustrations</h1>

    <section class="bento-gallery" id="illustrations">
      {galleryItems.Illustrations.map(src => (
        <div class="bento-item">
          <img src={`illustrations/${src}`} alt="Illustration" />
        </div>
      ))}
    </section>

    <section class="bento-gallery" id="animation" style="display:none">
      {galleryItems.Animation.filter(src => src.endsWith(".mp4")).map(src => (
        <div class="bento-item">
          <video src={`animations/${src}`} controls preload="metadata" style="width:100%; height:auto;" />
        </div>
      ))}
      {galleryItems.Animation.filter(src => src.endsWith(".webp")).map(src => (
        <div class="bento-item">
          <img src={`animations/${src}`} alt="Animation webp" />
        </div>
      ))}
    </section>

    <section class="bento-gallery" id="3d" style="display:none">
      {galleryItems["3D"].filter(src => src.endsWith(".webp")).map(src => (
        <div class="bento-item"><img src={`3d/${src}`} alt="3D WebP" /></div>
      ))}
      {galleryItems["3D"].filter(src => src.endsWith(".png")).map(src => (
        <div class="bento-item"><img src={`3d/${src}`} alt="3D PNG" /></div>
      ))}
    </section>

    <section class="bento-gallery" id="storyboard" style="display:none">
      {storyboardItems.map(item => (
        <div class="bento-item storyboard-item">
          <video src={`storyboard/${item.src}`} controls preload="metadata" style="width:100%; height:auto;" />
          <div class="item-text">
            <h3>{item.title}</h3>
            <hr />
            <p>{item.description}</p>
          </div>
        </div>
      ))}
    </section>

    <div class="music-row" id="music" style="display:none">
      {musicItems.map((item, index) => (
        <div class="music-item music-player" data-index={index}>
          <div class="music-cover"><img src={`music/${item.cover}`} alt={item.title} /></div>
          <div class="music-info"><h3>{item.title}</h3><p>{item.artist}</p></div>
          <div class="player-controls">
            <button class="play-btn" aria-label="Play/Pause">
              <svg class="icon play-icon" viewBox="0 0 24 24"><polygon points="5,3 19,12 5,21" fill="currentColor"/></svg>
              <svg class="icon pause-icon" viewBox="0 0 24 24" style="display:none"><rect x="5" y="3" width="5" height="18" fill="currentColor"/><rect x="14" y="3" width="5" height="18" fill="currentColor"/></svg>
            </button>
            <div class="progress-container"><div class="progress-bar"></div></div>
          </div>
          <audio src={`music/${item.src}`}></audio>
        </div>
      ))}
    </div>
  </Container>
</main>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const tabs = document.querySelectorAll(".tabs button");
  const sections = {
    Illustrations: document.getElementById("illustrations"),
    Animation: document.getElementById("animation"),
    "3D": document.getElementById("3d"),
    Storyboard: document.getElementById("storyboard"),
    Music: document.getElementById("music")
  };
  const title = document.getElementById("tab-title");

  tabs.forEach(tab => {
  tab.addEventListener("click", () => {
    const selected = tab.dataset.tab;

    // Active tab styling
    tabs.forEach(t => t.classList.remove("active"));
    tab.classList.add("active");
    title.textContent = selected;

    // Show/hide sections with repeated fade-up animation
    Object.keys(sections).forEach(key => {
      const section = sections[key];
      const children = Array.from(section.children);

      if (key === selected) {
        section.style.display = key === "Music" ? "flex" : "block";
        
        // Reset children for animation
        children.forEach(child => {
          child.style.opacity = "0";
          child.style.transform = "translateY(5px)";
          child.style.transition = "none";
        });

        // Trigger fade-up with stagger
        requestAnimationFrame(() => {
          children.forEach((child, i) => {
            child.style.transition = `opacity 0.5s ease ${i*0.02}s, transform 0.5s ease ${i*0.02}s`;
            child.style.opacity = "1";
            child.style.transform = "translateY(0)";
          });
        });

      } else {
        section.style.display = "none";
        children.forEach(child => {
          child.style.opacity = "0";
          child.style.transform = "translateY(5px)";
          child.style.transition = "none";
        });
      }
    });
  });
});

});

// Music player functionality
document.addEventListener("DOMContentLoaded", () => {
  const players = document.querySelectorAll(".music-player");
  players.forEach(player => {
    const audio = player.querySelector("audio");
    const playBtn = player.querySelector(".play-btn");
    const playIcon = playBtn.querySelector(".play-icon");
    const pauseIcon = playBtn.querySelector(".pause-icon");
    const progressContainer = player.querySelector(".progress-container");
    const progressBar = player.querySelector(".progress-bar");

    playBtn.addEventListener("click", () => {
      if(audio.paused) {
        document.querySelectorAll("audio").forEach(a=>{if(a!==audio)a.pause();});
        audio.play(); playIcon.style.display="none"; pauseIcon.style.display="block";
      } else { audio.pause(); playIcon.style.display="block"; pauseIcon.style.display="none"; }
    });

    audio.addEventListener("timeupdate", ()=>progressBar.style.width=`${(audio.currentTime/audio.duration)*100}%`);
    audio.addEventListener("ended", ()=>{ playIcon.style.display="block"; pauseIcon.style.display="none"; progressBar.style.width="0%"; });

    progressContainer.addEventListener("click", e=>{
      const rect = progressContainer.getBoundingClientRect();
      audio.currentTime = ((e.clientX - rect.left)/rect.width)*audio.duration;
    });

    let dragging = false;
    progressContainer.addEventListener("mousedown", e=>{dragging=true; update(e)});
    window.addEventListener("mousemove", e=>dragging && update(e));
    window.addEventListener("mouseup", ()=>dragging=false);

    function update(e){
      const rect = progressContainer.getBoundingClientRect();
      let x = e.clientX - rect.left;
      x = Math.max(0, Math.min(x, rect.width));
      audio.currentTime = (x/rect.width)*audio.duration;
    }
  });
});
</script>

<style>
main.content { flex:1; margin-left:260px; padding:2rem; color:var(--text-dark); position:relative; z-index:1; }

.tabs { display:flex; gap:1rem; margin-bottom:1rem; }
.tabs button { background:var(--container); color:var(--text-dark); border:2px solid var(--border-container); border-radius:.75rem; padding:.5rem 1rem; font-weight:600; cursor:pointer; transition:.3s; }
.tabs button.active { background:var(--color-4); color:var(--text-main); border-color:var(--color-1); }

.bento-gallery { column-count:4; column-gap:.5rem; }
.bento-item { display:inline-block; width:100%; margin-bottom:.1rem; border-radius:.5rem; overflow:hidden; cursor:pointer; transition:transform .2s ease, box-shadow .2s ease; }
.bento-item:hover { transform:translateY(-2px); box-shadow:0 4px 12px rgba(0,0,0,.1); }
.bento-item img, .bento-item video { width:100%; height:auto; display:block; object-fit:cover; }

.storyboard-item { display:flex; flex-direction:column; break-inside:avoid; margin:0 auto 1.5rem; max-width:500px; }
.bento-gallery#storyboard { column-count:2; column-gap:1rem; }
@media(max-width:900px){.bento-gallery#storyboard{column-count:1;}}

.item-text { padding:.5rem 0; }
.item-text h3 { margin:.3rem 0; font-size:1.2rem; font-weight:600; }
.item-text hr { border:none; border-top:1px solid rgba(0,0,0,.1); margin:.3rem 0; }
.item-text p { margin:0; font-size:1rem; color:var(--text-dark); }

.music-row { display:flex; flex-wrap:wrap; gap:1.5rem; }
.music-player { display:flex; flex-direction:column; align-items:center; background:var(--container); border:2px solid var(--border-container); border-radius:1rem; padding:1rem; width:220px; box-shadow:0 4px 12px rgba(0,0,0,.1); transition:.2s; }
.music-player:hover { transform:translateY(-3px); box-shadow:0 6px 16px rgba(0,0,0,.15); }
.music-cover img { width:100%; border-radius:.75rem; margin-bottom:.5rem; }
.music-info h3 { font-size:1rem; margin:.3rem 0; font-weight:600; text-align:center; }
.music-info p { font-size:.85rem; margin:0; text-align:center; color:var(--text-dark); }
.player-controls { display:flex; align-items:center; gap:.5rem; width:100%; margin-top:.5rem; }
.play-btn { background:var(--color-4); color:var(--text-main); border:none; border-radius:50%; width:36px; height:36px; display:flex; align-items:center; justify-content:center; cursor:pointer; }
.play-btn .icon { width:20px; height:20px; }
.progress-container { flex:1; height:6px; background:rgba(0,0,0,.1); border-radius:3px; overflow:hidden; cursor:pointer; position:relative; }
.progress-bar { height:100%; width:0%; background:var(--color-1); border-radius:3px; transition:width .05s linear; }

.bento-item, .music-player { opacity:0; transform:translateY(20px); transition:opacity .5s ease, transform .5s ease; }

@media(max-width:1200px){.bento-gallery{column-count:3;}}
@media(max-width:900px){.bento-gallery{column-count:2;}}
@media(max-width:600px){.bento-gallery{column-count:1;}}
</style>
